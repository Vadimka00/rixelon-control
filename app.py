# Flask –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from flask import Flask, request, jsonify, render_template, session, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_wtf.csrf import CSRFProtect

# SQLAlchemy ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from sqlalchemy import ForeignKey, CheckConstraint, extract, func, Interval
from sqlalchemy.orm import validates, relationship
from sqlalchemy.ext.hybrid import hybrid_property

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—É—Ç—è–º–∏
from urllib.parse import unquote, quote_plus
from dotenv import load_dotenv
import os
import secrets

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—É—Ç—è–º–∏
from urllib.parse import unquote, quote_plus
from dotenv import load_dotenv
import os
import secrets

# –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
from datetime import datetime, timedelta, date, time
import time  # –¥–ª—è time.sleep()

# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
import hashlib
import re

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
import logging
import traceback

# –í–µ–±-–∑–∞–ø—Ä–æ—Å—ã
import requests

from threading import Thread

from bot import run_bot, friends_notification, new_task_notification, auth_notification, confirmation_code
from utils import get_user_by_id, get_user_by_telegram_id, count_user_notifications, save_temp_code, verify_reg_code, create_user_from_temp, generate_code, email_to_code  
from models import User, UserLogin, TempCode, Task, FriendRequest, Friendship, Notification   # –ú–æ–¥–µ–ª–∏ –¥–ª—è User –∏ TempCode
from core import app, db, bot, MOSCOW_TZ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename='logs/error_log.txt',
    level=logging.INFO,  # INFO —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏ –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
@app.after_request
def add_no_cache_headers(response):
    if request.path in ['/', '/dashboard']:
        response.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
        response.headers["Pragma"] = "no-cache"
        response.headers["Expires"] = "-1"
    return response

@app.route('/')
def index():
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/notifications')
def notifications():
    if 'user_id' not in session:
        return render_template('index.html')
    
    user = get_user_by_id(session['user_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications = Notification.query.filter(
        (Notification.to_telegram_id == user['telegram_id']) | 
        (Notification.to_telegram_id.is_(None))
    ).order_by(Notification.timestamp.desc()).all()
    
    notifications_list = []
    for notification in notifications:
        notification_data = {
            'id': notification.id,
            'title': notification.title,
            'message': notification.message,
            'timestamp': notification.timestamp.isoformat(),
            'from_telegram_id': notification.from_telegram_id
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏–º—è
        if notification.from_telegram_id:
            sender = User.query.filter_by(telegram_id=notification.from_telegram_id).first()
            if sender:
                notification_data['sender_name'] = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        
        notifications_list.append(notification_data)
    
    return jsonify(notifications_list)

    

@app.route('/dashboard')
def dashboard():
    if 'user_id' in session:
        user = get_user_by_id(session['user_id'])
        count_notif = count_user_notifications(user['telegram_id'])
        if user:
            return render_template('dashboard.html', role=user['role'], user=user, count_notif=count_notif)
    return render_template('index.html')

@app.route('/search')
def search():
    query = request.args.get('q', '').strip()
    if not query:
        return jsonify([])

    user_id = session.get('user_id')
    current_user = get_user_by_id(session['user_id'])
    if not current_user:
        return jsonify([])

    search_query = f"%{query}%"

    # –ù–∞–π–¥—ë–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É–∂–µ –¥—Ä—É–∂–∏—Ç —Ç–µ–∫—É—â–∏–π
    friends = db.session.query(Friendship).filter(
        db.or_(
            Friendship.user1_telegram_id == current_user['telegram_id'],
            Friendship.user2_telegram_id == current_user['telegram_id']
        )
    ).all()

    friend_ids = {
        f.user1_telegram_id if f.user1_telegram_id != current_user['telegram_id'] else f.user2_telegram_id
        for f in friends
    }

    # –ù–∞–π–¥—ë–º –∑–∞–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    requested_ids = {
        r.to_telegram_id for r in FriendRequest.query.filter_by(from_telegram_id=current_user['telegram_id']).all()
    }

    users = User.query.filter(
        db.or_(
            (User.first_name + " " + db.func.coalesce(User.last_name, "")).ilike(search_query),
            User.telegram_username.ilike(search_query)
        )
    ).limit(20).all()

    results = []
    for user in users:
        if user.telegram_id == current_user['telegram_id']:
            continue
        if user.telegram_id in friend_ids:
            continue  # —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö

        full_name = user.first_name
        if user.last_name:
            full_name += f" {user.last_name}"

        results.append({
            "full_name": full_name.strip(),
            "username": user.telegram_username or "",
            "photo": user.photo or "",
            "telegram_id": user.telegram_id,
            "requested": user.telegram_id in requested_ids
        })

    return jsonify(results)

@app.route('/add_friend', methods=['POST'])
def add_friend():
    try:
        data = request.get_json()
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: {data}")

        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞")
            return jsonify(success=False, error="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"), 400

        telegram_id = data.get('telegram_id')
        if not telegram_id:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç telegram_id –≤ –∑–∞–ø—Ä–æ—Å–µ: {data}")
            return jsonify(success=False, error="–ù–µ—Ç telegram_id"), 400

        user_id = session.get('user_id')
        current_user = get_user_by_id(user_id)
        if not current_user:
            logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏: {user_id}")
            return jsonify(success=False, error="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏"), 400

        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç {current_user['telegram_id']} –∫ {telegram_id}")
        existing = FriendRequest.query.filter_by(
            from_telegram_id=current_user['telegram_id'],
            to_telegram_id=telegram_id
        ).first()

        if existing:
            logging.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç {current_user['telegram_id']} –∫ {telegram_id}")
            return jsonify(success=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        new_request = FriendRequest(
            from_telegram_id=current_user['telegram_id'],
            to_telegram_id=telegram_id
        )
        db.session.add(new_request)
        logging.info(f"üíæ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç {current_user['telegram_id']} –∫ {telegram_id}")

        user = get_user_by_telegram_id(current_user['telegram_id'])
        if not user:
            logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify(success=False, error="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"), 404

        first_name = user['first_name']
        last_name = user['last_name']
        full_name = f"{first_name} {last_name}" if last_name else first_name

        telegram_name = f'<a href="@{current_user["telegram_username"]}">{full_name}</a>'

        title = "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è"
        message = f"–ü—Ä–∏–≤–µ—Ç, —É —Ç–µ–±—è –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç {telegram_name}!"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = Notification(
            title=title,
            message="–ü—Ä–∏–≤–µ—Ç, —É —Ç–µ–±—è –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç ",
            to_telegram_id=telegram_id,
            from_telegram_id=current_user['telegram_id']
        )
        db.session.add(notification)
        db.session.commit()
        logging.info(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: '{title}' –¥–ª—è {telegram_id}")

        friends_notification(telegram_id, title, message, current_user['telegram_id'])
        logging.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

        return jsonify(success=True)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /add_friend: {e}", exc_info=True)
        return jsonify(success=False, error="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500

@app.route('/friends')
def get_friends():
    if 'user_id' not in session:
        return render_template('index.html')

    current_user = get_user_by_id(session['user_id'])
    if not current_user:
        return jsonify({'error': 'User not found'}), 404
    
    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    friends = db.session.query(
        User,
        Friendship
    ).join(
        Friendship,
        db.or_(
            db.and_(
                Friendship.user1_telegram_id == current_user['telegram_id'],
                Friendship.user2_telegram_id == User.telegram_id
            ),
            db.and_(
                Friendship.user2_telegram_id == current_user['telegram_id'],
                Friendship.user1_telegram_id == User.telegram_id
            )
        )
    ).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏)
    outgoing_requests = db.session.query(
        User,
        FriendRequest
    ).join(
        FriendRequest,
        FriendRequest.to_telegram_id == User.telegram_id
    ).filter(
        FriendRequest.from_telegram_id == current_user['telegram_id']
    ).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏)
    incoming_requests = db.session.query(
        User,
        FriendRequest
    ).join(
        FriendRequest,
        FriendRequest.from_telegram_id == User.telegram_id
    ).filter(
        FriendRequest.to_telegram_id == current_user['telegram_id']
    ).all()
    
    return jsonify({
        'friends': [{
            'name': f"{user.first_name} {user.last_name}" if user.last_name else user.first_name,
            'username': user.telegram_username,
            'photo': user.photo,
            'telegram_id': user.telegram_id
        } for user, _ in friends],
        'outgoing_requests': [{
            'name': f"{user.first_name} {user.last_name}" if user.last_name else user.first_name,
            'username': user.telegram_username,
            'photo': user.photo,
            'telegram_id': user.telegram_id,
            'request_id': request.id  # ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        } for user, request in outgoing_requests],
        'incoming_requests': [{
            'name': f"{user.first_name} {user.last_name}" if user.last_name else user.first_name,
            'username': user.telegram_username,
            'photo': user.photo,
            'telegram_id': user.telegram_id,
            'request_id': request.id  # ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        } for user, request in incoming_requests],
        'current_user': {
            'first_name': current_user['first_name'],
            'last_name': current_user['last_name'],
            'username': current_user['telegram_username'],
            'photo': current_user['photo']
        }
    })

@app.route('/friend-tasks')
def get_friend_tasks():
    if 'user_id' not in session:
        return render_template('index.html')

    current_user = get_user_by_id(session['user_id'])
    if not current_user:
        return jsonify({'error': 'User not found'}), 404

    friends = db.session.query(User, Friendship).join(
        Friendship,
        db.or_(
            db.and_(
                Friendship.user1_telegram_id == current_user['telegram_id'],
                Friendship.user2_telegram_id == User.telegram_id
            ),
            db.and_(
                Friendship.user2_telegram_id == current_user['telegram_id'],
                Friendship.user1_telegram_id == User.telegram_id
            )
        )
    ).all()

    return jsonify({
        'friends': [{
            'name': f"{user.first_name} {user.last_name or ''}".strip(),
            'username': user.telegram_username,
            'photo': user.photo,
            'telegram_id': user.telegram_id
        } for user, _ in friends],
    })

@app.route('/reject_request', methods=['POST'])
def reject_request():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user = get_user_by_id(session['user_id'])
    if not user:
        return jsonify({'error': 'User not found'}), 404
        
    data = request.get_json()
    user_id = data.get('user_id')
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    friend_request = db.session.execute(
        db.select(FriendRequest)
        .where(
            db.or_(
                db.and_(
                    FriendRequest.from_telegram_id == user['telegram_id'],
                    FriendRequest.to_telegram_id == user_id
                ),
                db.and_(
                    FriendRequest.from_telegram_id == user_id,
                    FriendRequest.to_telegram_id == user['telegram_id']
                )
            )
        )
    ).scalar_one_or_none()
    if not friend_request:
        return jsonify({'error': 'Request not found'}), 404
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –≤ –¥—Ä—É–∑—å—è
    notification = db.session.execute(
        db.select(Notification)
        .where(
            db.and_(
                Notification.title == "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è",
                Notification.from_telegram_id == user_id,
                Notification.to_telegram_id == user['telegram_id']
            )
        )
    ).scalar_one_or_none()
    
    if notification:
        db.session.delete(notification)
        logging.info(f"üóë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    db.session.delete(friend_request)
    
    db.session.commit()

    return jsonify({'success': True})

@app.route('/accept_request', methods=['POST'])
def accept_request():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user = get_user_by_id(session['user_id'])
    if not user:
        return jsonify({'error': 'User not found'}), 404
        
    data = request.get_json()
    user_id = data.get('user_id')
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    friend_request = db.session.execute(
        db.select(FriendRequest)
        .where(
            db.or_(
                db.and_(
                    FriendRequest.from_telegram_id == user['telegram_id'],
                    FriendRequest.to_telegram_id == user_id
                ),
                db.and_(
                    FriendRequest.from_telegram_id == user_id,
                    FriendRequest.to_telegram_id == user['telegram_id']
                )
            )
        )
    ).scalar_one_or_none()
    if not friend_request:
        return jsonify({'error': 'Request not found'}), 404
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –≤ –¥—Ä—É–∑—å—è
    notification = db.session.execute(
        db.select(Notification)
        .where(
            db.and_(
                Notification.title == "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è",
                Notification.from_telegram_id == user_id,
                Notification.to_telegram_id == user['telegram_id']
            )
        )
    ).scalar_one_or_none()
    
    if notification:
        db.session.delete(notification)
        logging.info(f"üóë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}")
    
    # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É
    new_friendship = Friendship(
        user1_telegram_id=user['telegram_id'],
        user2_telegram_id=user_id
    )
    db.session.add(new_friendship)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    db.session.delete(friend_request)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    first_name = user['first_name']
    last_name = user['last_name']
    full_name = f"{first_name} {last_name}" if last_name else first_name
    telegram_name = f'<a href="@{user["telegram_username"]}">{full_name}</a>'

    message = f"{telegram_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!"

    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    notification = Notification(
        title="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
        message=" –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!",
        to_telegram_id=user_id,
        from_telegram_id=user['telegram_id']
    )
    db.session.add(notification)
    
    db.session.commit()
    logging.info(f"üì¨ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞' –¥–ª—è {user_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è friends_notification —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    friends_notification(user_id, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", message, user['telegram_id'])
    logging.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    return jsonify({'success': True})

@app.route('/add/new_task', methods=['POST'])
def add_new_task():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authorized'}), 401

    current_user = get_user_by_id(session['user_id'])
    if not current_user:
        return jsonify({'error': 'User not found'}), 404

    data = request.get_json()
    print('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', data)

    try:
        category_map = {
            'work': '–†–∞–±–æ—Ç–∞',
            'study': '–£—á–µ–±–∞',
            'home': '–î–æ–º',
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
            'social': '–í—Å—Ç—Ä–µ—á–∞',
            'hobby': '–•–æ–±–±–∏',
            'sleep': '–°–æ–Ω'
        }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all([data.get('time_start'), data.get('time_end'), data.get('description')]):
            return jsonify({'error': 'Missing required fields'}), 400

        start_time = datetime.strptime(data['time_start'], '%H:%M').time()
        end_time = datetime.strptime(data['time_end'], '%H:%M').time()
        
        if start_time >= end_time:
            return jsonify({'error': 'Start time must be before end time'}), 400

        task_date_str = data.get('task_date')
        task_date = datetime.strptime(task_date_str, '%Y-%m-%d').date() if task_date_str else None
        description = data.get('description', '').strip()
        category_key = data.get('category')
        collaborator_id = data.get('friend_id')

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = category_map.get(category_key) if category_key else None
        if category_key and not category_name:
            return jsonify({'error': 'Invalid category'}), 400

        def create_task(telegram_id, collaborator_id=None):
            return Task(
                telegram_id=telegram_id,
                collaborator_id=collaborator_id,
                category=category_name,
                category_filter=category_key,
                task_date=task_date,
                start_time=start_time,
                end_time=end_time,
                title=description
            )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task = create_task(current_user['telegram_id'], collaborator_id)
        db.session.add(task)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å collaborator, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–ª—è –Ω–µ–≥–æ
        if collaborator_id:
            collaborator_task = create_task(collaborator_id, current_user['telegram_id'])
            db.session.add(collaborator_task)
            new_task_notification(collaborator_id, description, task_date, start_time, end_time, current_user['telegram_id'])
        
        db.session.commit()

        return jsonify({'status': 'success', 'message': 'Task added successfully'})

    except ValueError as e:
        print('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', e)
        return jsonify({'error': 'Invalid data format'}), 400
    except Exception as e:
        db.session.rollback()
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', e)
        return jsonify({'error': 'Server error'}), 500
    finally:
        db.session.close()


@app.route('/tasks-main')
def get_all_tasks():
    if 'user_id' not in session:
        return render_template('index.html')

    user = get_user_by_id(session['user_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = Task.query.filter_by(
        telegram_id=user['telegram_id']
    ).options(
        db.joinedload(Task.collaborator)
    ).all()
    
    result = []
    for task in tasks:
        task_data = {
            'id': task.id,
            'title': task.title,
            'category_filter': task.category_filter,
            'category': task.category,
            'start_time': task.start_time.isoformat() if task.start_time else None,
            'end_time': task.end_time.isoformat() if task.end_time else None,
            'task_date': task.task_date.isoformat() if task.task_date else None,
            'collaborator_info': None
        }
        
        if task.collaborator:
            task_data['collaborator_info'] = {
                'telegram_username': task.collaborator.telegram_username,
                'first_name': task.collaborator.first_name,
                'last_name': task.collaborator.last_name or '',
                'photo': task.collaborator.photo
            }
        
        result.append(task_data)
    
    return jsonify(result)

@app.route('/tasks')
def get_tasks():
    if 'user_id' not in session:
        return render_template('index.html')

    user = get_user_by_id(session['user_id'])
    date = request.args.get('date')

    print(user['telegram_id'], date)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å JOIN –∫ collaborator
    tasks = Task.query.filter_by(
        telegram_id=user['telegram_id'],
        task_date=date
    ).options(
        db.joinedload(Task.collaborator)  # –ñ–∞–¥–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ collaborator
    ).all()
    
    result = []
    for task in tasks:
        task_data = {
            'id': task.id,
            'title': task.title,
            'category_filter': task.category_filter,
            'category': task.category,
            'start_time': task.start_time.isoformat(),
            'end_time': task.end_time.isoformat(),
            'collaborator_info': None
        }
        
        if task.collaborator:
            task_data['collaborator_info'] = {
                'telegram_username': task.collaborator.telegram_username,
                'first_name': task.collaborator.first_name,
                'last_name': task.collaborator.last_name,
                'photo': task.collaborator.photo
            }
        
        result.append(task_data)
    
    return jsonify(result)

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('index'))

@app.route('/check_email', methods=['POST'])
def check_email():
    email = request.json.get('email', '')[:100] # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
        return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'}), 400
    
    try:
        user = User.query.filter_by(email=email).first()
        
        if user:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã
            verification_code = generate_code()
            email_code = email_to_code(email)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
            save_temp_code(email, verification_code, role='user', ttl_minutes=3)
            print(verification_code, email)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ email
            user_from_db = User.query.filter_by(email=email).first()
            confirmation_code(user_from_db.telegram_id, verification_code)
            print(f"{user_from_db.telegram_id}")
            
            
            return jsonify({
                'status': 'confirmation',
                'code': verification_code
            })
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã
            verification_code = generate_code()
            email_code = email_to_code(email)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
            save_temp_code(email, verification_code, role='user', ttl_minutes=3)
            print(verification_code, email)

            return jsonify({
                'status': 'not_found',
                'code': verification_code,
                'email_code': email_code
            })
            
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/verify_code', methods=['POST'])
def verify_code():
    try:
        data = request.json
        email = data.get('email')
        code = data.get('code')[:6]

        if not email or not code:
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}), 400

        result = verify_reg_code(email, code)
        print(result)
        if not result['success']:
            return jsonify({'success': False, 'error': result['error']}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_from_db = User.query.filter_by(email=email).first()
        
        if not user_from_db:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            new_user = create_user_from_temp(email)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—Ö–æ–¥–µ
            login_record = UserLogin(
                user_id=new_user.id,
                email=new_user.email,
                last_login=datetime.now(MOSCOW_TZ)
            )
            db.session.add(login_record)
            db.session.commit()
            session['user_id'] = new_user.id
        else:
            date = datetime.now(MOSCOW_TZ)
            auth_notification(email, date)
            user_from_db.login_record.last_login = datetime.now(MOSCOW_TZ)
            session['user_id'] = user_from_db.id
            db.session.commit()

        temp = TempCode.query.filter_by(email=email).first()
        if temp:
            db.session.delete(temp)
            db.session.commit()

        return jsonify({'success': True, 'redirect': '/dashboard'})

    except Exception as e:
        db.session.rollback()  # –í–∞–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        traceback.print_exc()  # –ü–µ—á–∞—Ç—å –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        return jsonify({'success': False, 'error': str(e)}), 500

