
document.addEventListener('DOMContentLoaded', () => {
  const timeStart = document.getElementById('time-start');
  const timeEnd = document.getElementById('time-end');
  const descriptionField = document.querySelector('textarea');
  const categoryHeader = document.querySelector('.select-header span');
  const addButton = document.querySelector('.create-tasks-btn');
  const friendInput = document.getElementById('friend-select');

  const categoryMap = {
    '–†–∞–±–æ—Ç–∞': 'work',
    '–£—á–µ–±–∞': 'study',
    '–î–æ–º': 'home',
    '–ó–¥–æ—Ä–æ–≤—å–µ': 'health',
    '–í—Å—Ç—Ä–µ—á–∞': 'social',
    '–•–æ–±–±–∏': 'hobby',
    '–°–æ–Ω': 'sleep'
  };

  function checkRequiredFields() {
    const timeStartFilled = timeStart.value.trim() !== '';
    const timeEndFilled = timeEnd.value.trim() !== '';
    const descriptionFilled = descriptionField.value.trim() !== '';
    addButton.disabled = !(timeStartFilled && timeEndFilled && descriptionFilled);
  }

  // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryOptions = document.querySelectorAll('.select-options .option');
  categoryOptions.forEach(option => {
    option.addEventListener('click', () => {
      categoryHeader.textContent = option.textContent;
      checkRequiredFields();
    });
  });

  timeStart.addEventListener('input', checkRequiredFields);
  timeEnd.addEventListener('input', checkRequiredFields);
  descriptionField.addEventListener('input', checkRequiredFields);

  addButton.addEventListener('click', () => {
    const startTime = timeStart.value.trim();
    const endTime = timeEnd.value.trim();
    const description = descriptionField.value.trim();
    const categoryText = categoryHeader.textContent.trim();
    const category = categoryMap[categoryText] || null;
    const friendId = friendInput.dataset.friendId || null;
  
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
    const activeDay = document.querySelector('.day.selected');
    const taskDate = activeDay ? activeDay.dataset.date : null;

    if (!taskDate) {
      console.error('–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD
    const [day, month, year] = taskDate.split('.');
    const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;

    const taskData = {
      time_start: startTime,
      time_end: endTime,
      description: description,
      category: category,
      friend_id: friendId,
      task_date: formattedDate  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    };
  
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏:', taskData);
  
    fetch('/add/new_task', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify(taskData)
    })
    .then(response => {
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏');
      return response.json();
    })
    .then(data => {
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
  
      if (data.status === 'success') {
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        timeStart.value = '';
        timeEnd.value = '';
        descriptionField.value = '';
        categoryHeader.textContent = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
        friendInput.value = '';
  
        checkRequiredFields(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
  
        console.log('üßπ –§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
      } else {
        console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ "success":', data);
      }
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    });
  });
  

  checkRequiredFields();
});