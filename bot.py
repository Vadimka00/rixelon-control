from datetime import datetime
from core import app, db, bot, MOSCOW_TZ
from models import User, TempCode  # –ú–æ–¥–µ–ª–∏ –¥–ª—è User –∏ TempCode
from utils import create_profile_image, get_email_by_email_code, get_user_by_telegram_id  # –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –∫–æ–¥–µ
import requests
import time

from core import app, db, bot, MOSCOW_TZ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def handle_start(message):
    with app.app_context():  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        user = message.from_user
        telegram_id = user.id
        telegram_username = user.username if user.username else None
        first_name = user.first_name if user.first_name else None
        last_name = user.last_name if user.last_name else None

        try:

            if 'AUTH=' not in message.text:
                bot.reply_to(message, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞")
                return

            email_code = message.text.split('AUTH=')[1].strip()
            
            # –ü–æ–∏—Å–∫ email –ø–æ –∫–æ–¥—É
            email = get_email_by_email_code(email_code)
            
            if not email:
                bot.reply_to(message, "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                return
            
            user_from_db = User.query.filter_by(telegram_id=telegram_id).first()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_from_db:
                bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º")
                return
                
            code_data = TempCode.query.filter_by(email=email).first()
            if not code_data or code_data.is_expired():
                bot.reply_to(message, "‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ")
                if code_data:
                    db.session.delete(code_data)
                    db.session.commit()
                return

            profile_photo_url = create_profile_image(first_name, last_name, telegram_id)

            bot.send_message(
                message.chat.id,
                f"üîë –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>{code_data.code}</code>\n",
                parse_mode='HTML'
            )

            temp = code_data
            if temp:
                temp.telegram_id = telegram_id
                temp.telegram_username = telegram_username
                temp.first_name = first_name
                temp.last_name = last_name
                temp.photo = profile_photo_url
                db.session.commit()

            else:
                print(f"–ó–∞–ø–∏—Å—å –¥–ª—è {email} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def confirmation_code(user_id, verification_code):
    try:
        bot.send_message(
            user_id,
            f"üîë –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>{verification_code}</code>\n",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")

def get_email_user(email):
    user = User.query.filter_by(email=email).first()
    return user.telegram_id if user else None

def auth_notification(email, date):
    user_id = get_email_user(email)
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        formatted_date = date.strftime("%d/%m/%Y %H:%M") + " (–ú–°–ö)"
        
        bot.send_message(
            user_id,
            f"–í –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥: <b>{formatted_date}</b>\n",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")

def friends_notification(to_telegram_id, title, message, from_telegram_id):
    try:
        text = f"<b>{title}</b>\n\n{message}"

        bot.send_message(
            to_telegram_id,
            text,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")

def new_task_notification(to_telegram_id, title, task_date, start_time, end_time, from_telegram_id):
    try:
        from_user = get_user_by_telegram_id(from_telegram_id)
        first_name = from_user['first_name']
        last_name = from_user['last_name']
        full_name = f"{first_name} {last_name}" if last_name else first_name

        def format_time(t):
            try:
                return datetime.strptime(str(t), "%H:%M:%S").strftime("%H:%M")
            except:
                try:
                    return datetime.strptime(str(t), "%H:%M").strftime("%H:%M")
                except:
                    return str(t)

        def format_date(d):
            try:
                return datetime.strptime(str(d), "%Y-%m-%d").strftime("%d/%m/%Y")
            except:
                return str(d)

        print(start_time)
        print(end_time)
        print(task_date)

        start_time_str = format_time(start_time)
        end_time_str = format_time(end_time)
        task_date_str = format_date(task_date)

        telegram_name = f'<a href="tg://user?id={from_user["telegram_id"]}">{full_name}</a>'
        text = (
            f"<b>–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å {telegram_name}!</b>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {title}\n\n"
            f"<b>–í—Ä–µ–º—è:</b> {start_time_str} - {end_time_str}\n"
            f"<b>–î–∞—Ç–∞:</b> {task_date_str}"
        )

        bot.send_message(
            chat_id=to_telegram_id,
            text=text,
            parse_mode='HTML'
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")


def run_bot():
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, timeout=30)  # –£–≤–µ–ª–∏—á—å—Ç–µ —Ç–∞–π–º–∞—É—Ç
        except requests.exceptions.ConnectTimeout as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            time.sleep(10)